::

    Status: Draft
    Type: Feature
    Created: 2025-03-24
    Authors: Aljaž Mur Eržen <aljaz@edgedb.com>

===================================
RFC 1029: Role Based Access Control
===================================

This RFC discusses expansion of roles and permissions that are
used to limit the access to a database based on provided connection
credentials.


Motivation
==========

Existing roles work on "all or nothing" principle: there is no way to
grant a user a read-only access to the database, or even an access that
would prevent DDL.

Additionally, it would be useful to provide access control for each schema
object, such that certain schema objects could be hidden or made read-only,
but only for certain roles.

Roles or (or any other RBAC objects) must not be part of the schema, because
different deployments of the same application should be able to configure
different access control. Also, schema should never depend on any roles
(or other non-schema objects), since that would prevent applying such schema to
a fresh instance, which would break dump/restore workflow.


Current state
=============

Currently, Gel supports creation and modification of roles. Each role has a name
and optionally a password. When connecting to an instance, role name is
specified as the username.

Roles can only be designated as ``SUPERUSER``.

In addition, when executing EdgeQL queries, the request can specify which of the
following capabilities are allowed to be used by the query:

- ``MODIFICATIONS``: whether INSERT/UPDATE/DELETE statements are allowed,
- ``DDL``: whether CREATE/ALTER/DROP commands are allowed,
- ``TRANSACTION``: whether transaction commands are allowed,
- ``SESSION_CONFIG``: whether access to SET SESSION is allowed,
- ``PERSISTENT_CONFIG``: whether SET INSTANCE/CURRENT BRANCH is allowed.

These capabilities are expressed as bit flags in ``Parse`` and ``Execute``
messages. Language bindings are supposed to set only ``MODIFICATIONS`` and
``DDL`` by default for queries executed by user code.
Gel CLI allows all above capabilities.

Connection role does not affect allowed capabilities.


Proposal
========


Non-superuser roles
-------------------

We allow creating roles that are not marked as ``SUPERUSER``. These roles are
not allowed to use any commands apart from querying, transaction commands,
and certain ``CONFIGURE SESSION`` commands.

Permissions
-----------

Permission is a schema object, with a `CREATE` and `DROP` DDL commands, scoped
to a module:

code::

    CREATE PERMISSION default::data_export;
    CREATE PERMISSION frontend::webapp;


User schema can contain any number of permissions, in addition to the
built-in permissions discussed below.

Each role is assigned a set of allowed permissions, via `permissions` property
of roles.

code::

    ALTER ROLE my_role {
        SET permissions := {
            default::data_export, frontend::webapp, sys::perm::data_modifiction
        };
    };

.. When executing a query, the server computes the intersection of the current
.. role's allowed capabilities and explicitly specified capabilities in the
.. ``Parse`` or ``Execute`` messages. If compiled query requires a capability that
.. is not in the intersection, the query is rejected without even sending it to
.. PostgreSQL.


When a new role is created, it is assigned no permissions. Roles marked as
``SUPERUSER`` are deemed to have all permissions.

Since roles are created per-instance, their assigned permissions are applied
to all branches and their schemas. The ``permissions`` property of roles are
not name-checked against any schema. They can be set to arbitrary identifiers.

It is required that an instance where roles' permissions are referring to
permissions in the user schema can have its schema wiped, without affecting
roles or their assigned permissions. Similarly, it is required that an empty
instance can be populated with roles and their permissions, before applying
schema.

When validating, role's permissions are compared to schema permissions by
their fully-qualified identifiers, converted to strings.

Permissions can only be set by ``SUPERUSER`` users, similarly to how roles can
only be created and dropped by super users.


Per-object access control
-------------------------

For each created permission, a global with the same name is made available.
It is evaluated to a boolean value, which is true iff the role of current
connection has the associated permission.

The global cannot be assigned to, but it is otherwise a normal global variable;
it can be used in any expression.

In combination with access policies, this allows precise control over which
objects of an object type are visible or can be modified by each role.

For example::

    CREATE TYPE Secret {
        CREATE PROPERTY super_secret: str;

        CREATE ACCESS POLICY allow_webapp
            ALLOW ALL
            USING (global frontend::webapp);

        CREATE ACCESS POLICY allow_warehouse
            ALLOW SELECT
            USING (global data_export);

        CREATE ACCESS POLICY allow_inserts
            ALLOW INSERT;
    };

An important detail is that access policies for ``select`` only filter data
and do not raise errors when an object type is accessed without required
permissions. It would be more user-friendly to raise an error instead of
returning no results, but we currently do not provide a reliable way of
raising errors within access policies. See rejected ideas for justification.

Per-function access control
---------------------------

Functions cannot have access policies, but we do want to be able to
limit access to certain functions, such as ``sys::reset_query_stats`` and
``net::http::schedule_request``.

To provide access control to functions, we introduce a new function metadata
field named ``required_permissions``. It adds the provided permissions to the list
of required permissions of the query, similar to how `DDL` and other existing
capabilities work. It can take one or multiple permissions.

code::

    CREATE FUNCTION sys::reset_query_stats(...) -> ... {
        SET volatility := ...
        SET required_permissions := sys::perm::query_stats;
        USING SQL FUNCTION ...;
    };

When a query is compiled the set of required permissions is stored on the
compiled query unit. When executing the unit, the server validates that all
permissions of this set are held by the role of current connection and that
these permissions are allowed by the protocol capabilities allowed by the
client.


Built-in permissions
--------------------

There is a collection of capabilities for built-in language features,
matching some of the protocol capabilities:

- ``sys::perm::data_modifiction`` is required for ``insert``, ``delete`` and
  ``update`` EdgeQL queries.
- ``sys::perm::ddl`` is required for performing DDL
- ``sys::perm::branch_config`` is required for altering branch config. (Only superusers can alter instance config, since that includes auth anyway.)

- ``sys::perm::query_stats`` is required to access ``sys::QueryStats`` and associated
  functions.


.. TODO: EXPLAIN, DESCRIBE, ADMINISTER??

.. TODO: add more caps for issuing net requests


Session configuration permissions
#################################

Certain session configurations will always be permitted, while others
will require a permission. Any not listed are not permitted.

Always OK:

- default_transaction_isolation
- default_transaction_access_mode
- default_transaction_deferrable
- force_database_error
- simple_scoping
- warn_old_scoping
- pg_trgm::*
- pg_vector::*

Requires ``cfg::perm::configure_timeouts``

- session_idle_transaction_timeout
- query_execution_timeout

Requires ``cfg::perm::configure_apply_access_policies``

- apply_access_policies
- apply_access_policies_pg

Requires ``cfg::perm::configure_allow_user_specified_id``

- allow_user_specified_id


The configuration will be done with annotations on Config objects,
like everything else with the config system.


Future work
===========

Permission inheritance
----------------------

Similar to other schema objects, permissions could be allowed to extend other
permissions.

    CREATE PERMISSION log_export EXTENDING data_export;

When a role is assigned a permission, it is also assigned all of its
descendant permissions.

This would be useful for constructing a granular permission surface, while
also having a way to grant permissions in bulk.

A need for this was shown when all protocol-level capabilities were also
schema-defined permissions and we needed a way to allow roles to use the cli:

code::

    CREATE PERMISSION sys::perm::schema_modification EXTENDING sys::perm::cli;
    CREATE PERMISSION sys::perm::data_modification EXTENDING sys::perm::cli;
    CREATE PERMISSION sys::perm::stateful_config EXTENDING sys::perm::cli;
    ALTER ROLE my_user { SET permissions := {sys::perm::cli}; };


Ownership
---------

With current design, there is no such concept as "the owner of a schema object".
Schema just extists and anyone who is ``SUPERUSER`` is allowed to modify it.

There are use-cases (and designs in other RBAC implementations) for each object
to have an owner, who has exclusive modification permissions over that object.

Because exact design and interaction with inheritance is unclear, this idea is
left to be explored in the future.


Context role switching
----------------------

With current design, functions, triggers, and all other query constructs are
executed and validated against the role of current connection.

There are use-cases for ability to switch the context of the current role to
some other role in the instance.

An example would be a function that can execute its body in the context of the
role that created that function, such as a function to log user actions which
inserts into an admin table.

This can be implemented by adding a "security" field which would be an enum of
``(Definer, Invoker)``. Triggers, functions and other mutation actors can be
declared with ``security := Definer`` to effectively run in superuser context.


Rejected ideas
==============

Permission annotations
----------------------

Each schema object can be annotated by a list of required permissions.
To execute a query, the role has to have all of required permissions of
all schema objects accessed by the query.

This idea was rejected because we already have a mechanism for access control
on object types and we don't want feature duplication. Access policies also
allow differentiation between reads and writes of objects.

Provide sys::current_role instead of permissions
------------------------------------------------

Instead of ``sys::current_permissions`` we introduce ``sys::current_role``.
It would remove an indirection and make RBAC simpler.

This idea was rejected because we want to limit access to std lib object types
and functions (e.g. ``sys::QueryStats``). If we hard-coded role names into
access policies of such objects, users would be required to have roles with
those names and would not be able to grant or revoke access of different roles
to said objects.


Introduce a function instead of global
--------------------------------------

Instead of introducing ``global default::data_export``, we could introduce
function ``sys::get_current_permissions(): set of str`` or
``sys::has_current_permission(cap: str)``.

This idea was rejected because we want to avoid providing permissions as
strings, since that would allow users to perform text operations on them, which
is an anti-pattern. Strings are also not strongly typed and would not produce
error messages when the name of the permission is misspelled, for example.

We also explored having a function that would take an proper identifier of
the capability, for example ``sys::has_permission(perm: schema::Permission)``,
but that would require weird calling syntax
(``sys::has_permission(introspect default::data_export)``) and also open the
question what is the value of plain ``select default::data_export``.


Raising errors from access policies
-----------------------------------

To implement "raising an error in access policy" instead of
"filter query results", we could recommend using an ``assert`` in the body of
the access policy.

The first problem, is that this approach would not work for object types that
do not contain any objects (or are immediately filtered down to zero objects).

Secondly, there is a possibility that PostgreSQL optimizer would not trigger
the assert failure and would just return an empty result. We do not have a
clear picture of exactly when this would happen, but we had have it happen
before. Because of that we would prefer not to rely on this mechanism for RBAC,
which is supposed to be used as a security barrier and requires a high degree
of certainty in its correctness.

That said, there is nothing that would prevent users from using ``assert`` in
access policy body as of now. For higher degree of certainty, the policy could
be written such that if assert fails to trigger, an empty result is returned.
That would only leak type information of the result, which can be introspected
from ``schema::ObjectType`` anyway.


Backwards Compatibility
=======================

Dump/restore of a branch with some existing roles must be implemented such
that these roles get assigned all capabilities.

Otherwise, this proposal is fully backward compatible.
